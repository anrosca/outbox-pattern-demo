---
version: '2'
services:
  #Zookeeper for Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:6.0.1
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  #Kafka broker
  broker:
    image: confluentinc/cp-kafka:6.0.1
    container_name: broker
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "49999:49999"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 100
      KAFKA_JMX_PORT: 49999

  #Kafka's schema registry
  schema-registry:
    image: confluentinc/cp-schema-registry:6.0.1
    container_name: schema-registry
    ports:
      - "8081:8081"
    depends_on:
      - broker
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: broker:29092

  #Order operational database
  order-service-operational-db:
    image: postgres:13.3
    container_name: order-service-operational-db
    command:
      - "postgres"
      - "-c"
      - "wal_level=logical"
    environment:
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: order_db
    ports:
      - "5432:5432"

  #Shipment operational database
  shipment-service-operational-db:
    image: postgres:13.3
    container_name: shipment-service-operational-db
    command:
      - "postgres"
      - "-c"
      - "wal_level=logical"
    environment:
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: shipment_db
    ports:
      - "5433:5432"

  #Kafka connect (with Debezium, JdbcSource and JdbcSink connectors)
  kafka-connect:
    image: confluentinc/cp-kafka-connect-base:6.0.1
    container_name: kafka-connect
    depends_on:
      - broker
      - schema-registry
    ports:
      - "8083:8083"
    environment:
      CONNECT_BOOTSTRAP_SERVERS: "broker:29092"
      CONNECT_REST_PORT: 8083
      CONNECT_GROUP_ID: kafka-connect
      CONNECT_CONFIG_STORAGE_TOPIC: _connect-configs
      CONNECT_OFFSET_STORAGE_TOPIC: _connect-offsets
      CONNECT_STATUS_STORAGE_TOPIC: _connect-status
      CONNECT_KEY_CONVERTER: org.apache.kafka.connect.storage.StringConverter
      #      CONNECT_VALUE_CONVERTER: org.apache.kafka.connect.storage.StringConverter
      CONNECT_VALUE_CONVERTER: io.confluent.connect.avro.AvroConverter
      CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: 'http://schema-registry:8081'
      CONNECT_REST_ADVERTISED_HOST_NAME: "kafka-connect"
      CONNECT_LOG4J_APPENDER_STDOUT_LAYOUT_CONVERSIONPATTERN: "[%d] %p %X{connector.context}%m (%c:%L)%n"
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: "1"
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: "1"
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: "1"
      #  ---------------
      CONNECT_PLUGIN_PATH: /usr/share/java,/usr/share/confluent-hub-components,/data/connect-jars
    # If you want to use the Confluent Hub installer to d/l component, but make them available
    # when running this offline, spin up the stack once and then run :
    #   docker cp kafka-connect:/usr/share/confluent-hub-components ./data/connect-jars
    #    volumes:
    #      - $PWD/data:/data
    # In the command section, $ are replaced with $$ to avoid the error 'Invalid interpolation format for "command" option'
    command:
      - bash
      - -c
      - |
        echo "Installing Connector"
        confluent-hub install --no-prompt confluentinc/kafka-connect-jdbc:10.2.0
        confluent-hub install --no-prompt debezium/debezium-connector-postgresql:latest
        confluent-hub install --no-prompt confluentinc/kafka-connect-elasticsearch:latest
        #
        echo "Launching Kafka Connect worker"
        /etc/confluent/docker/run &
        #
        sleep infinity

  elasticdbz:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.4.0
    container_name: elasticdbz
    ports:
      - 9200:9200
    environment:
      xpack.security.enabled: "false"
      ES_JAVA_OPTS: "-Xms1g -Xmx1g"
      discovery.type: "single-node"

#  #Redis cache
#  redis-cpt-cache:
#    image: redis
#    container_name: redis-cpt-cache
#    ports:
#      - "6379:6379"

#  #Prometheus
#  prometheus:
#    image: prom/prometheus:v2.28.1
#    container_name: prometheus
#    ports:
#      - "9090:9090"
#    volumes:
#      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml

#  #Grafana dashboard
#  grafana:
#    image: grafana/grafana:8.0.6
#    container_name: grafana
#    ports:
#      - "3000:3000"
#    depends_on:
#      - prometheus

#  #Crypto profit tracker app
#  crypto-profit-tracker:
#    image: cpt/crypto-profit-tracker:0.0.1
#    container_name: crypto-profit-tracker
#    ports:
#      - "8080:8080"
#    environment:
#      POSTGRES_JDBC_URL: jdbc:postgresql://ias-operational-db:5432/investment-alerts
#      POSTGRES_PASSWORD: postgres
#      POSTGRES_USER: postgres
#      REDIS_HOST: redis-cpt-cache
#      REDIS_PORT: 6379
#    #    restart: on-failure
#    depends_on:
#      - ias-operational-db
#      - redis-cpt-cache
